
############################################################
                    GET INITIAL GENERALISATION
############################################################
I'm experimenting with a program and trying to find what makes an increasingly large set of inputs valid. So far I have found one possible set of correct constraints/ conditions (not the only one) which define a valid input. Here they are.

Valid constraints for 1 inputs (N=1):
None

Valid constraints for 2 inputs (N=2):
in0 != in1

Valid constraints for 3 inputs (N=3):
in1 != in2, in0 != in2, in0 != in1

Valid constraints for 4 inputs (N=4):
in2 != in3, in1 != in3, in1 != in2, in0 != in3, in0 != in2, in0 != in1

Valid constraints for 5 inputs (N=5):
in3 != in4, in2 != in4, in2 != in3, in1 != in4, in1 != in3, in1 != in2, in0 != in4, in0 != in3, in0 != in2, in0 != in1

Valid constraints for 6 inputs (N=6):
in4 != in5, in3 != in5, in3 != in4, in2 != in5, in2 != in4, in2 != in3, in1 != in5, in1 != in4, in1 != in3, in1 != in2, in0 != in5, in0 != in4, in0 != in3, in0 != in2, in0 != in1

Valid constraints for 7 inputs (N=7):
in5 != in6, in4 != in6, in4 != in5, in3 != in6, in3 != in5, in3 != in4, in2 != in6, in2 != in5, in2 != in4, in2 != in3, in1 != in6, in1 != in5, in1 != in4, in1 != in3, in1 != in2, in0 != in6, in0 != in5, in0 != in4, in0 != in3, in0 != in2, in0 != in1

Valid constraints for 8 inputs (N=8):
in6 != in7, in5 != in7, in5 != in6, in4 != in7, in4 != in6, in4 != in5, in3 != in7, in3 != in6, in3 != in5, in3 != in4, in2 != in7, in2 != in6, in2 != in5, in2 != in4, in2 != in3, in1 != in7, in1 != in6, in1 != in5, in1 != in4, in1 != in3, in1 != in2, in0 != in7, in0 != in6, in0 != in5, in0 != in4, in0 != in3, in0 != in2, in0 != in1

Valid constraints for 9 inputs (N=9):
in7 != in8, in6 != in8, in6 != in7, in5 != in8, in5 != in7, in5 != in6, in4 != in8, in4 != in7, in4 != in6, in4 != in5, in3 != in8, in3 != in7, in3 != in6, in3 != in5, in3 != in4, in2 != in8, in2 != in7, in2 != in6, in2 != in5, in2 != in4, in2 != in3, in1 != in8, in1 != in7, in1 != in6, in1 != in5, in1 != in4, in1 != in3, in1 != in2, in0 != in8, in0 != in7, in0 != in6, in0 != in5, in0 != in4, in0 != in3, in0 != in2, in0 != in1

Valid constraints for 10 inputs (N=10):
in8 != in9, in7 != in9, in7 != in8, in6 != in9, in6 != in8, in6 != in7, in5 != in9, in5 != in8, in5 != in7, in5 != in6, in4 != in9, in4 != in8, in4 != in7, in4 != in6, in4 != in5, in3 != in9, in3 != in8, in3 != in7, in3 != in6, in3 != in5, in3 != in4, in2 != in9, in2 != in8, in2 != in7, in2 != in6, in2 != in5, in2 != in4, in2 != in3, in1 != in9, in1 != in8, in1 != in7, in1 != in6, in1 != in5, in1 != in4, in1 != in3, in1 != in2, in0 != in9, in0 != in8, in0 != in7, in0 != in6, in0 != in5, in0 != in4, in0 != in3, in0 != in2, in0 != in1

Generalise what makes the set of constraints valid such that we can recover a valid set for N inputs. Don't overfit the data here but also dont oversimplify to the point of trivialness. Make sure none of the given examples contradict your generalisation.

Use this code template to formally express the generalisation for N constraints:
```python
def generate_constraints(N):
    constraints = []

    # Do some logic here to append constraints

    return constraints

N = int(input("N="))
constraints = generate_constraints(N)
constraints = ", ".join(constraints)
print(constraints)```

Each inequality is usually in the form "x op y" where x, y are some variable, constant or some formula of variables and/ or constants, and op is an operation or inequality.
############################################################
INFORMAL

From our given examples, it is observed that for an input set with N elements, every input in0...in(N-1) should not be equal to every other input that comes after it, excluding itself. Basically, in a set of inputs, each input is not equal to any other input at a higher position in the set.

Mathematically, if we let in0, in1, ..., in(N-1) be the inputs for some N, then for each i in [0, N), the constraints added are:
{in_i != in_j | for every j in (i, N)}

So, for a given N, the total number of constraints would be the sum of natural numbers up to (N-1), or (N)(N-1)/2.

FORMAL

```python
def generate_constraints(N):
    constraints = []
    for i in range(N):
        for j in range(i+1, N):
            constraints.append(f'in{i} != in{j}')
    return constraints

N = int(input("N="))
constraints = generate_constraints(N)
constraints = ", ".join(constraints)
print(constraints)
```
############################################################
                    ATTEMPT NUMBER 1
############################################################
                    EVALUATING EXAMPLE NUMBER 1
############################################################
Input: 1,
Output: 

############################################################
                    EVALUATING EXAMPLE NUMBER 2
############################################################
Input: 2,
Output: in0 != in1

############################################################
                    EVALUATING EXAMPLE NUMBER 3
############################################################
Input: 3,
Output: in0 != in1, in0 != in2, in1 != in2

############################################################
                    EVALUATING EXAMPLE NUMBER 4
############################################################
Input: 4,
Output: in0 != in1, in0 != in2, in0 != in3, in1 != in2, in1 != in3, in2 != in3

############################################################
                    EVALUATING EXAMPLE NUMBER 5
############################################################
Input: 5,
Output: in0 != in1, in0 != in2, in0 != in3, in0 != in4, in1 != in2, in1 != in3, in1 != in4, in2 != in3, in2 != in4, in3 != in4

############################################################
                    EVALUATING EXAMPLE NUMBER 6
############################################################
Input: 6,
Output: in0 != in1, in0 != in2, in0 != in3, in0 != in4, in0 != in5, in1 != in2, in1 != in3, in1 != in4, in1 != in5, in2 != in3, in2 != in4, in2 != in5, in3 != in4, in3 != in5, in4 != in5

############################################################
                    EVALUATING EXAMPLE NUMBER 7
############################################################
Input: 7,
Output: in0 != in1, in0 != in2, in0 != in3, in0 != in4, in0 != in5, in0 != in6, in1 != in2, in1 != in3, in1 != in4, in1 != in5, in1 != in6, in2 != in3, in2 != in4, in2 != in5, in2 != in6, in3 != in4, in3 != in5, in3 != in6, in4 != in5, in4 != in6, in5 != in6

############################################################
                    EVALUATING EXAMPLE NUMBER 8
############################################################
Input: 8,
Output: in0 != in1, in0 != in2, in0 != in3, in0 != in4, in0 != in5, in0 != in6, in0 != in7, in1 != in2, in1 != in3, in1 != in4, in1 != in5, in1 != in6, in1 != in7, in2 != in3, in2 != in4, in2 != in5, in2 != in6, in2 != in7, in3 != in4, in3 != in5, in3 != in6, in3 != in7, in4 != in5, in4 != in6, in4 != in7, in5 != in6, in5 != in7, in6 != in7

############################################################
                    EVALUATING EXAMPLE NUMBER 9
############################################################
Input: 9,
Output: in0 != in1, in0 != in2, in0 != in3, in0 != in4, in0 != in5, in0 != in6, in0 != in7, in0 != in8, in1 != in2, in1 != in3, in1 != in4, in1 != in5, in1 != in6, in1 != in7, in1 != in8, in2 != in3, in2 != in4, in2 != in5, in2 != in6, in2 != in7, in2 != in8, in3 != in4, in3 != in5, in3 != in6, in3 != in7, in3 != in8, in4 != in5, in4 != in6, in4 != in7, in4 != in8, in5 != in6, in5 != in7, in5 != in8, in6 != in7, in6 != in8, in7 != in8

############################################################
                    EVALUATING EXAMPLE NUMBER 10
############################################################
Input: 10,
Output: in0 != in1, in0 != in2, in0 != in3, in0 != in4, in0 != in5, in0 != in6, in0 != in7, in0 != in8, in0 != in9, in1 != in2, in1 != in3, in1 != in4, in1 != in5, in1 != in6, in1 != in7, in1 != in8, in1 != in9, in2 != in3, in2 != in4, in2 != in5, in2 != in6, in2 != in7, in2 != in8, in2 != in9, in3 != in4, in3 != in5, in3 != in6, in3 != in7, in3 != in8, in3 != in9, in4 != in5, in4 != in6, in4 != in7, in4 != in8, in4 != in9, in5 != in6, in5 != in7, in5 != in8, in5 != in9, in6 != in7, in6 != in8, in6 != in9, in7 != in8, in7 != in9, in8 != in9
